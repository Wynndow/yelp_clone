c
Time.now
review
c
Time.now
c
Time.now
c
review
c
Time.now
c
Time.now
review
c
n
Review.first
c
Time.now
review
c
n
nn
n
Review.first
c
q
e
c
distance_of_time_in_words(Time.now)
distance_of_time_in_words
Time.now.beginning_of_hour
(Time.now - review.created_at).to_time
(Time.now - review.created_at).beginning_of_hour
c
diff / 60 / 60
diff / 60
diff = Time.now - review.created_at
Time.now - review.created_at
Time.now - review.created_at / 60
Time.now - review.created_at
review.created_at
Time.now
n
Review.first
c
review
c
review
c
difference
n
Time.now
review
c
Time.now.to_i - review.created_at.to_i
Time.now.to_i = review.created_at.to_i
review.created_at.to_i
Time.now.to_i - 
Time.now
60 * 60
Time.now - review.created_at
review.created_at
review
Time.now
c
difference
Time.now - review.created_at
Time.now - review.created_At
difference
Time.now - review.created_at
Time.now
review.created_at
3600 / 60
3600 \60
difference
c
reviews.count
reviews.length
review.length
c
reviews.length
reviews.count
c
exit
reviews.count
reviews.length
reviews.average(:rating).to_i
reviews.average(:rating)
reviews.length
reviews
self.reviews
self
self.
c
self.reviews
self
c
reviews
puts reviews.average(:rating)
reviews
c
n
puts reviews.average(:rating).to_i
puts reviews.average(:rating)
reviews.average(:rating)
reviews.average
c
print reviews.average(:rating)
puts reviews.average(:rating)
reviews.average(:rating)
reviews.average(:rating).to_i
reviews.average(:rating) + 1
reviews.average(:rating)
reviews
c
reviews.inject(0) {|memo, review| memo + review.rating} / reviews.length
reviews.inject(0) {|memo, review| memo + review.rating} / reviews.count
reviews.length
Reviews.count
reviews.length
reviews.count
reviews
c
n
reviews
reviews.length
reviews.count
c
@review.user
@review
@restaurant.reviews.user
@restaurant.reviews
@restaurant
c
@restaurant.reviews
@review
@review.user_id
@review.user
@review
@restaurant.reviews
@restaurant
c
restaurant.reviews
restaurant.review
restaurant.reviews
restaurant.name
restaurant
c
@restaurant.reviews
@restaurant
@review
n
@restaurant
n
@restaurant
restaurant.reviews
c
n
restaurant.reviews
restaurant
c
restaurant.reviews
restaurant
c
nn
n
nn
n
@restaurant.reviews
@restaurant
@review
n
@restaurant
n
Restaurant.find(params[:restaurant_id])
c
review_params
review.params
params[:restaurant_id]
params
review_params[:restaurant_id]
review_params
params.require(:review).permit(:thoughts, :rating)
params.require(:review).permit(:thoughts)
params.require(:review).permit(:thoughts, :rating)
params.require(:review)
params
c
current_user.reviewed_restaurants
current_user.restaurants
current_user.reviews
current_user
c
n
current_user.reviewed_restaurants
current_user
c
n
current_user.reviewed_restaurants
current_user.reviews
@restaurant
current_user
c
@restaurant.errors
n
@restaurant
c
@restaurant
n
c
Restaurant.first
n
@current_user
@restaurant
c
Restaurant.last
Restaurant.first
User.last
User.first
current_user
c
User.all
User.first
User(1)
c
s
c
s
n
c
@user
n
auth.uid
auth.provider
provider
providor
c
flash[:error]
n
@user.errors.full_messages
@user.errors
@user
c
exception
n
new_user_registration_url
redirect_to
n
request.env["omniauth.auth"]
env
request.env
@user.persisted?
@user
n
User.from_omniauth(request.env["omniauth.auth"])
